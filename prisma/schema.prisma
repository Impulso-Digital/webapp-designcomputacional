// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())  // ID único do usuário
  nome        String   // Nome completo do usuário
  nome_usuario String  @unique  // Nome de usuário único
  email       String   @unique  // Email único
  senha       String   // Senha do usuário (criptografada)
  role        String   @default("Usuário")  // Role padrão como "Usuário"
  createdAt   DateTime @default(now())  // Data de criação do usuário
  lastLogin   DateTime?  // Data do último login do usuário (opcional)
  foto_perfil String?
  
  // Relação com o modelo Projeto
  projetos    Projeto[] @relation("UserProjetos")  // Relacionamento com os projetos do usuário
}

model Projeto {
  id            Int      @id @default(autoincrement())  // ID único do projeto
  nome          String   // Nome do projeto
  descricao     String   // Descrição do projeto
  tags          String   // Tags associadas ao projeto (separadas por vírgula)
  codigo        String   // Código do projeto (pode ser o código em p5.js ou Processing)
  tipoProjeto   String   // Tipo do projeto (p5.js ou Processing)
  userId        Int      // ID do usuário associado ao projeto
  user          User     @relation("UserProjetos", fields: [userId], references: [id])  // Relação com o usuário
  thumbnail     String?  // Caminho do arquivo da miniatura (thumbnail)
  projetoFile   String?  // Caminho do arquivo do projeto (ex: arquivo ZIP ou estrutura do projeto)
  codigoFile    String?
  createdAt     DateTime @default(now())  // Data de criação do projeto
  updatedAt     DateTime @updatedAt  // Data de última atualização do projeto
  status        String   @default("pendente")
}



model TokenBlacklist {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  createdAt DateTime @default(now())
}